# [START cloudbuild]
steps:
# This step runs the unit tests on the app
- name: 'python:3.9-slim-buster'
  id: Test
  entrypoint: /bin/sh
  args:
  - -c
  - 'pip install flask && pip install --upgrade google-cloud-firestore && python test_app.py -v'

# This step builds the container image.
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/acg-resume-api:$SHORT_SHA'
  - '.'

# This step pushes the image to Container Registry
# The PROJECT_ID and SHORT_SHA variables are automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - 'push'
  - 'gcr.io/$PROJECT_ID/acg-resume-api:$SHORT_SHA'

# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/git'
  id: Copy to production branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    # Configure Git to create commits with Cloud Build's service account
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \ git config --global user.email "pgbrady@umich.edu" && git config --global user.name "Patrick Brady" && \
    # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
    gcloud source repos clone acg-resume-api-prod
    cd /workspace/acg-resume-api-prod
    git pull https://source.developers.google.com/p/ihpi-testing/r/github_pbrady32_acg-resume-api
    # Commit the kubernetes.yaml file with a descriptive commit message
    git add .
    git commit -m "Manifest from commit $COMMIT_SHA
    $(git log --format=%B -n 1 $COMMIT_SHA)" && \
    # Push the changes back to Cloud Source Repository
    git push origin master
# [END Cloudbuild]